import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
from apscheduler.schedulers.blocking import BlockingScheduler
import pytz
import logging
import time
from datetime import timedelta

from app.check_price_levels import check_price_levels
from app.telegrammes import send_telegram_message
from app.getweeklydata import fetch_weekly_data
from app.calculatelevels import calculate_levels
from app.update_google_sheet import update_google_sheet
from app.config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SPREADSHEET_ID = Config.SHEETS_ID
CHECK_INTERVAL = 5  # –º–∏–Ω—É—Ç
CREDS_FILE = 'credentials.json'
SYMBOLS = ['BTC/USDT', 'ETH/USDT', 'XRP/USDT', 'BNB/USDT', 'SOL/USDT', 'DOGE/USDT',
           'ADA/USDT', 'TRX/USDT', 'SUI/USDT', 'AVAX/USDT', 'NEAR/USDT', 'TRUMP/USDT', 'XLM/USDT']
ATR_PERIOD = 14
TIME_TO_RUN = '3:01'  # –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ (–∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
TIMEZONE = 'Europe/Moscow'  # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å

DELAY_BETWEEN_MESSAGES = 3

signal_counters = {}  # –§–æ—Ä–º–∞—Ç: {'BTC/USDT': {'week_max': timestamp, ...}}
last_reset_time = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/app/atr_updater.log'),
        logging.StreamHandler()
    ]
)


def reset_counters_if_needed():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 3:00"""
    global last_reset_time, signal_counters
    now = datetime.now(pytz.timezone(TIMEZONE))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ:
    # 1. –°–µ–≥–æ–¥–Ω—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (weekday=0)
    # 2. –í—Ä–µ–º—è >= 3:00
    # 3. –° –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ—à–ª–∞ –Ω–µ–¥–µ–ª—è (–∏–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è)
    if (
        now.weekday() == 0  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        and now.hour >= 3   # –ü–æ—Å–ª–µ 3:00
        and (
            last_reset_time is None
            or (now - last_reset_time) >= timedelta(days=7)
        )
    ):
        signal_counters = {}
        last_reset_time = now.replace(hour=3, minute=0, second=0, microsecond=0)
        logging.info("–°—á–µ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 3:00)")
        send_telegram_message("üîÑ –°—á–µ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã - –Ω–∞—á–∞—Ç–∞ –Ω–æ–≤–∞—è –Ω–µ–¥–µ–ª—è")


def can_send_alert(symbol, level_type):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª"""
    reset_counters_if_needed()

    if symbol not in signal_counters:
        signal_counters[symbol] = {}

    # –ú–∞–∫—Å–∏–º—É–º 4 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –º–æ–Ω–µ—Ç—É
    if len(signal_counters[symbol]) >= 4:
        return False

    # –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ —É–∂–µ –±—ã–ª
    if level_type in signal_counters[symbol]:
        return False

    return True


def mark_alert_sent(symbol, level_type):
    """–ü–æ–º–µ—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π"""
    signal_counters[symbol][level_type] = datetime.now(pytz.timezone(TIMEZONE))
    logging.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª {level_type} –¥–ª—è {symbol}. –í—Å–µ–≥–æ: {len(signal_counters[symbol])}/4")


def parse_number(value):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —á–∏—Å–ª–∞–º–∏ –≤ float –∏ –î–ï–õ–ò–¢ –ù–ê 100
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–∏: '1,79', '179', '50.0', '103 328.89'
    """
    try:
        if isinstance(value, (int, float)):
            return float(value) / 100  # –î–µ–ª–∏–º –¥–∞–∂–µ –µ—Å–ª–∏ —á–∏—Å–ª–æ —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏
        cleaned = str(value).strip()
        cleaned = cleaned.replace('\xa0', '').replace(' ', '').replace(',', '.')

        # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        cleaned = ''.join(c for c in cleaned if c.isdigit() or c in '.-')

        if not cleaned:
            return 0.0

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float –∏ –î–ï–õ–ò–ú –ù–ê 100
        return round(float(cleaned), 2)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è '{value}': {str(e)}")
        return 0.0
def auth_google_sheets():
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Google Sheets"""
    scope = [
        'https://spreadsheets.google.com/feeds',
        'https://www.googleapis.com/auth/drive'
    ]
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, scope)
    client = gspread.authorize(creds)
    return client.open_by_key(SPREADSHEET_ID).sheet1


def get_levels_from_sheet(sheet):
    levels_data = {}
    try:
        records = sheet.get_all_records()
        for record in records:
            try:
                symbol = record.get('–¢–∏–∫–µ—Ä', '').strip()
                if not symbol:
                    continue

                symbol += '/USDT'

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                levels_data[symbol] = {
                    'week_max': parse_number(record.get('–ù–µ–¥–µ–ª—è max', 0)),
                    'half_week_max': parse_number(record.get('1/2 –Ω–µ–¥–µ–ª—è max', 0)),
                    'week_min': parse_number(record.get('–ù–µ–¥–µ–ª—è min', 0)),
                    'half_week_min': parse_number(record.get('1/2 –Ω–µ–¥–µ–ª—è min', 0))
                }

                logging.debug(f"–£—Ä–æ–≤–Ω–∏ –¥–ª—è {symbol}: {levels_data[symbol]}")

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: {e}\n–î–∞–Ω–Ω—ã–µ: {record}")
                continue

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")

    return levels_data



def send_alert(symbol, price, level_type, level_value):
    if not can_send_alert(symbol, level_type):
        logging.warning(f"–õ–∏–º–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol} –¥–æ—Å—Ç–∏–≥ (4/–Ω–µ–¥–µ–ª—é) –∏–ª–∏ —Å–∏–≥–Ω–∞–ª {level_type} —É–∂–µ –±—ã–ª")
        return False

    level_names = {
        'week_max': '–ù–µ–¥–µ–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º',
        'half_week_max': '–ü–æ–ª–æ–≤–∏–Ω–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞',
        'week_min': '–ù–µ–¥–µ–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º',
        'half_week_min': '–ü–æ–ª–æ–≤–∏–Ω–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞'
    }

    message = (
        f"üö® <b>{symbol}</b>\n"
        f"üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <code>{float(price):.2f}</code>\n"
        f"üéØ {level_names[level_type]}: <code>{float(level_value):.2f}</code>\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now(pytz.timezone(TIMEZONE)).strftime('%H:%M:%S')}\n"
    )

    try:
        if send_telegram_message(message):
            mark_alert_sent(symbol, level_type)
            return True
        return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
        return False


def send_report_for_symbol(symbol):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
    try:
        data = fetch_weekly_data(symbol, ATR_PERIOD)
        levels = calculate_levels(data, ATR_PERIOD)

        message = (
            f"<b>üîπ {levels['symbol']}</b>\n"
            f"üìÖ –î–∞—Ç–∞: {levels['timestamp'].strftime('%Y-%m-%d')}\n\n"
            f"‚ñ´Ô∏è –ù–µ–¥–µ–ª—è max: <code>{levels['week_max']:.2f}</code>\n"
            f"‚ñ´Ô∏è 1/2 max: <code>{levels['half_week_max']:.2f}</code>\n"
            f"‚ñ´Ô∏è –ù–µ–¥–µ–ª—è min: <code>{levels['week_min']:.2f}</code>\n"
            f"‚ñ´Ô∏è 1/2 min: <code>{levels['half_week_min']:.2f}</code>"
        )

        if send_telegram_message(message):
            logging.info(f"–û—Ç—á–µ—Ç –¥–ª—è {levels['symbol']} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return True
        return False

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {str(e)}")
        return False


def generate_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    try:
        logging.info("–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤...")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        header_message = (
            f"<b>üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π ATR –æ—Ç—á–µ—Ç</b>\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now(pytz.timezone(TIMEZONE)).strftime('%Y-%m-%d %H:%M')}\n"
            f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: {DELAY_BETWEEN_MESSAGES} —Å–µ–∫."
        )
        send_telegram_message(header_message)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–º–≤–æ–ª—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        for symbol in SYMBOLS:
            success = send_report_for_symbol(symbol)
            if not success:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –¥–ª—è {symbol}")
            if SYMBOLS.index(symbol) < len(SYMBOLS) - 1:
                time.sleep(DELAY_BETWEEN_MESSAGES)

        logging.info("–í—Å–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        send_telegram_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")


def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    try:
        scheduler = BlockingScheduler(timezone=pytz.timezone(TIMEZONE))
        hour, minute = map(int, TIME_TO_RUN.split(':'))

        scheduler.add_job(
            reset_counters_if_needed,
            'cron',
            day_of_week='mon',
            hour=3,
            minute=0,
            name="Reset signal counters"
        )

        # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω
        scheduler.add_job(
            lambda: check_price_levels(auth_google_sheets, get_levels_from_sheet, SYMBOLS, send_alert,
                                       send_telegram_message),
            'interval',
            minutes=CHECK_INTERVAL,
            misfire_grace_time=300
        )

        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç (–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
        scheduler.add_job(
            generate_report,
            'cron',
            day_of_week='mon',
            hour=hour,
            minute=minute,
            misfire_grace_time=3600
        )

        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
        scheduler.add_job(
            lambda: update_google_sheet(auth_google_sheets, SYMBOLS, fetch_weekly_data, calculate_levels, ATR_PERIOD, TIMEZONE, send_telegram_message),
            'cron',
            day_of_week='mon',
            hour=hour,
            minute=minute,
            misfire_grace_time=3600
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        send_telegram_message(
            f"üîî –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞\n"
            f"‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL} –º–∏–Ω—É—Ç\n"
            f"üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ {TIME_TO_RUN} –ø–æ –ú–°–ö"
        )

        logging.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL} –º–∏–Ω—É—Ç")
        scheduler.start()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        send_telegram_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {str(e)}")


if __name__ == "__main__":
    main()